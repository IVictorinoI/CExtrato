{
    "openapi": "3.0.0",
    "info": {
      "description": "A aplication for people",
      "version": "v1",
      "title": "C - Extrato - Gateway",
      "license": {
        "name": "Use under LICX",
        "url": "https://github.com/IVictorinoI/"
      },
      "contact": {
        "name": "Victor Matheus Mendes",
        "email": "victormatheusmendes@hotmail.com",
        "url": "https://github.com/IVictorinoI/"
      }
    },
    "servers": [
      {
        "url": "/api/"
      }
    ],
    "tags": [
      {
        "name": "Customer Request",
        "description": "Customer API"
      },
      {
        "name": "CPF Check Request",
        "description": "CPF Check API"
      },
      {
        "name": "Movto Cartão Request",
        "description": "Movto Cartão API"
      },
      {
        "name": "Movto Financ Request",
        "description": "Movto Financ API"
      }
    ],
    "paths": {
      "/customer": {
        "get": {
          "tags": [
            "Customer Request"
          ],
          "summary": "Returns customers",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          }
        }
      },
      "/customer/{cpf}": {
        "parameters": [
          {
            "name": "cpf",
            "in": "path",
            "required": true,
            "description": "CPF of the cat that we want to match",
            "type": "string"
          }
        ],
        "put": {
          "summary": "Create/update a customer",
          "tags": [
            "Customer Request"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "cpf",
              "required": true,
              "description": "CPF of People",
              "schema": {
                "$ref": "#/components/schemas/cpf"
              }
            }
          ],
          "requestBody": {
            "description": "Syncronize with people service",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            },
            "400": {
              "description": "Failed. Bad post data."
            }
          }
        }
      },
      "/cpfCheck?populate=customer": {
        "get": {
          "tags": [
            "CPF Check Request"
          ],
          "summary": "Returns cpfChecks",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/cpfCheck"
              }
            }
          }
        }
      },
      "/cpfCheck": {
        "post": {
          "tags": [
            "CPF Check Request"
          ],
          "summary": "Create a new cpfCheck request system",
          "requestBody": {
            "description": "CPF Check Request Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cpfCheck"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            "400": {
              "description": "Failed. Bad post data."
            }
          }
        }
      },
      "/cpfCheck/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cat that we want to match",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "CPF Check Request"
          ],
          "summary": "Get cpfCheck request with given ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "CPF Check Request id",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/cpfCheck"
              }
            },
            "400": {
              "description": "Failed. Misunderstood Request."
            },
            "404": {
              "description": "Failed. CPF Check request not found."
            }
          }
        }
      },
      "/movtoFinanc?populate=customer": {
        "get": {
          "tags": [
            "Movto Financ Request"
          ],
          "summary": "Returns movtoFinancs",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/movtoFinanc"
              }
            }
          }
        }
      },
      "/movtoFinanc": {
        "post": {
          "tags": [
            "Movto Financ Request"
          ],
          "summary": "Create a new movtoFinanc request system",
          "requestBody": {
            "description": "Movto Financ Request Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/movtoFinanc"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            "400": {
              "description": "Failed. Bad post data."
            }
          }
        }
      },
      "/movtoFinanc/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cat that we want to match",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "Movto Financ Request"
          ],
          "summary": "Get movtoFinanc request with given ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Movto Financ Request id",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/movtoFinanc"
              }
            },
            "400": {
              "description": "Failed. Misunderstood Request."
            },
            "404": {
              "description": "Failed. Movto Financ request not found."
            }
          }
        },
        "delete": {
          "summary": "Delete MovtoFinanc Request by ID",
          "tags": [
            "Movto Financ Request"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "MovtoFinanc Request Id",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            "400": {
              "description": "Failed. Misunderstood Request."
            },
            "404": {
              "description": "Failed. Asset Request not found."
            }
          }
        }
      },
      "/movtoCartao?populate=customer": {
        "get": {
          "tags": [
            "Movto Cartão Request"
          ],
          "summary": "Returns movtoCartaos",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/movtoCartao"
              }
            }
          }
        }
      },
      "/movtoCartao": {
        "post": {
          "tags": [
            "Movto Cartão Request"
          ],
          "summary": "Create a new movtoCartao request system",
          "requestBody": {
            "description": "Movto Cartão Request Post Object",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/movtoCartao"
                }
              }
            }
          },
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            "400": {
              "description": "Failed. Bad post data."
            }
          }
        }
      },
      "/movtoCartao/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cat that we want to match",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "Movto Cartão Request"
          ],
          "summary": "Get movtoCartao request with given ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "Movto Cartão Request id",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/movtoCartao"
              }
            },
            "400": {
              "description": "Failed. Misunderstood Request."
            },
            "404": {
              "description": "Failed. Movto Cartão request not found."
            }
          }
        },
        "delete": {
          "summary": "Delete MovtoFinanc Request by ID",
          "tags": [
            "Movto Cartão Request"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "MovtoFinanc Request Id",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "OK",
              "schema": {
                "$ref": "#/components/schemas/id"
              }
            },
            "400": {
              "description": "Failed. Misunderstood Request."
            },
            "404": {
              "description": "Failed. Asset Request not found."
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "id": {
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        },
        "cpf": {
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        },
        "customer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "string"
            },
            "name": {
              "type": "string",
              "format": "string"
            },
            "cpf": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "cpfCheck": {
          "type": "object",
          "properties": {
            "cpf": {
              "type": "string",
              "format": "string"
            },
            "origin": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "movtoCartao": {
          "type": "object",
          "properties": {
            "cpf": {
              "type": "string",
              "format": "string"
            },
            "credDeb": {
              "type": "string",
              "format": "string",
              "enum": [ "CRED", "DEB"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "origin": {
              "type": "string",
              "format": "string"
            },
            "itens": {
              "type": "array",
              "items":{
                "$ref": "#/components/schemas/movtoCartaoItem"
              }  
            }
          }
        },
        "movtoCartaoItem": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "format": "string"
            },
            "value": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "movtoFinanc": {
          "type": "object",
          "properties": {
            "cpf": {
              "type": "string",
              "format": "string"
            },
            "type": {
              "type": "string",
              "format": "string",
              "enum": [ "TRANSFER", "PAY", "RECEIVE", "DONATE"]
            },
            "inOrOut": {
              "type": "string",
              "format": "string",
              "enum": [ "IN", "OUT"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "origin": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "customers": {
          "type": "object",
          "properties": {
            "customer": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/customer"
              }
            }
          }
        }
      }
    }
  }